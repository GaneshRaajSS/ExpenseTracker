// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Models;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250116061425_t1")]
    partial class t1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebApplication1.Models.Budget", b =>
                {
                    b.Property<int>("budgetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("budgetId"));

                    b.Property<int>("Threshold")
                        .HasColumnType("int");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("totalBudget")
                        .HasColumnType("int");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("budgetId");

                    b.HasIndex("userId");

                    b.ToTable("Budgets");
                });

            modelBuilder.Entity("WebApplication1.Models.Category", b =>
                {
                    b.Property<int>("categoriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("categoriesId"));

                    b.Property<string>("categoriesName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("categoriesId");

                    b.HasIndex("userId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("WebApplication1.Models.Currency", b =>
                {
                    b.Property<string>("currencyCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("currencyId")
                        .HasColumnType("int");

                    b.Property<decimal>("exchangeRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("currencyCode");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("WebApplication1.Models.RecurringTxn", b =>
                {
                    b.Property<int>("recurringTxnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("recurringTxnId"));

                    b.Property<string>("frequencyStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("recurrableDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("transactionId")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("recurringTxnId");

                    b.HasIndex("transactionId");

                    b.HasIndex("userId");

                    b.ToTable("RecurringTxns");
                });

            modelBuilder.Entity("WebApplication1.Models.Transaction", b =>
                {
                    b.Property<int>("transactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("transactionId"));

                    b.Property<decimal>("amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("categoriesId")
                        .HasColumnType("int");

                    b.Property<string>("currencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("payment_Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("recurring")
                        .HasColumnType("bit");

                    b.Property<DateTime>("txnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("txn_Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.Property<int?>("userId1")
                        .HasColumnType("int");

                    b.HasKey("transactionId");

                    b.HasIndex("categoriesId");

                    b.HasIndex("currencyCode");

                    b.HasIndex("userId");

                    b.HasIndex("userId1");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("WebApplication1.Models.User", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userId"));

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebApplication1.Models.Budget", b =>
                {
                    b.HasOne("WebApplication1.Models.User", "Users")
                        .WithMany("Budgets")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WebApplication1.Models.Category", b =>
                {
                    b.HasOne("WebApplication1.Models.User", "Users")
                        .WithMany("Categories")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WebApplication1.Models.RecurringTxn", b =>
                {
                    b.HasOne("WebApplication1.Models.Transaction", "Transactions")
                        .WithMany()
                        .HasForeignKey("transactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.User", "Users")
                        .WithMany("RecurringTxns")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transactions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WebApplication1.Models.Transaction", b =>
                {
                    b.HasOne("WebApplication1.Models.Category", "Categories")
                        .WithMany()
                        .HasForeignKey("categoriesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Currency", "Currencies")
                        .WithMany()
                        .HasForeignKey("currencyCode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.User", "Users")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.User", null)
                        .WithMany("Transactions")
                        .HasForeignKey("userId1");

                    b.Navigation("Categories");

                    b.Navigation("Currencies");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WebApplication1.Models.User", b =>
                {
                    b.Navigation("Budgets");

                    b.Navigation("Categories");

                    b.Navigation("RecurringTxns");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
